/*
 * Copyright (c) 2020 Noonmaru
 *
 * Licensed under the General Public License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/gpl-2.0.php
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

import org.gradle.internal.jvm.Jvm

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61' apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    group pluginGroup
    version pluginVersion

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'

    repositories {
        mavenCentral() // junit
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven { url = 'https://papermc.io/repo/repository/maven-public/' } //paper
        maven { url = "https://jitpack.io/" } //github library
    }

    dependencies {
        compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    }
}

subprojects {
    apply plugin: 'maven-publish'

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'

        Project api = project(':api')
        if (project != api)
            compile api
    }

    Project api = project(':api')

    if (project != api) {
        project.tasks.forEach {
            if (it.getName() != 'clean') {
                it.onlyIf {
                    gradle.taskGraph.hasTask(':shadowJar') || parent.hasProperty('withNMS')
                }
            }
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        archiveClassifier.set 'javadoc'
        from javadoc
    }

    publishing {
        publications {
            Tap(MavenPublication) {
                artifactId = "$parent.name-$project.name"
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = parent.name + "-" + project.name
                    description = 'Noonmaru minecraft library'
                    url = 'https://github.com/noonmaru/tap'
                    licenses {
                        license {
                            name = 'GPL-2.0'
                            url = 'http://www.opensource.org/licenses/gpl-2.0.php'
                        }
                    }
                    developers {
                        developer {
                            id = 'noonmaru'
                            name = 'Noonmaru'
                            email = 'noonmaru10@gmail.com'
                            url = 'https://github.com/noonmaru'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/noonmaru/tap.git'
                        developerConnection = 'scm:git:ssh://github.com/noonmaru/tap.git'
                        url = 'https://github.com/noonmaru/tap'
                    }
                }
            }
        }
    }
}

project(':api') {
    processResources {
        filesMatching('**/*.yml') {
            expand project.properties
        }
    }

    repositories {
        maven { url = 'https://repo.dmulloy2.net/nexus/repository/public/' } //Protocol Lib
    }

    dependencies {
        compileOnly files(Jvm.current().toolsJar)
        compileOnly 'com.destroystokyo.paper:paper-api:1.13.2-R0.1-SNAPSHOT'
        compileOnly 'com.comphenix.protocol:ProtocolLib:4.5.0'
    }
}

dependencies {
    compile subprojects
}

shadowJar {
    archiveClassifier.set 'dist'
}


task distJar(type: Copy) {
    from shadowJar
    into 'W:\\Servers\\capigtalism\\plugins'
    into 'W:\\Servers\\heroes\\plugins'
}